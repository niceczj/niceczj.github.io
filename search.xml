<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(一) BeanDefinition</title>
    <url>/2020/11/01/%E4%B8%80-BeanDefinition/</url>
    <content><![CDATA[<h1 id="什么是BeanDefinition"><a href="#什么是BeanDefinition" class="headerlink" title="什么是BeanDefinition"></a>什么是BeanDefinition</h1><p><code>BeanDefinition</code>是 bean 在 spring 中的元信息。<br>理解<code>BeanDefinition</code>，对后续列理解 Bean 生命周期非常重要。</p>
<a id="more"></a>

<h1 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h1><p><img src="/images/SpringFramework/BeanDefinition.png" alt="继承关系"><br>重点关注两个子类：</p>
<ol>
<li><code>AbstractBeanDefinition</code>：核心抽象，定义核心的属性和方法。</li>
<li><code>GenericBeanDefinition</code>：标准一站式类。兼备<code>RootBeanDefinition</code>与<code>ChildBeanDefinition</code>。并有动态设置父 Bean 的能力。</li>
</ol>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>AbstractBeanDefinition</strong></td>
<td>核心抽象，定义核心的属性和方法。其他的所有实现类都继承或者组合它。</td>
</tr>
<tr>
<td>AnnotatedBeanDefinition</td>
<td>拥有注解元数据和工厂方法元数据接口。</td>
</tr>
<tr>
<td>RootBeanDefinition</td>
<td>merged 后的 BeanDefinition。</td>
</tr>
<tr>
<td>ChildBeanDefinition</td>
<td>可以让子 BeanDefinition 继承父 BeanDefinition 的能力。</td>
</tr>
<tr>
<td><strong>GenericBeanDefinition</strong></td>
<td>标准一站式类。兼备<code>RootBeanDefinition</code>与<code>ChildBeanDefinition</code>。并有动态设置父 Bean 的能力</td>
</tr>
<tr>
<td>AnnotatedGenericBeanDefinition</td>
<td><code>@Configuration</code>配置类的元数据。</td>
</tr>
<tr>
<td>ScannedGenericBeanDefinition</td>
<td><code>@Component</code>元数据。</td>
</tr>
</tbody></table>
<h1 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h1><table>
<thead>
<tr>
<th>字段</th>
<th>xml配置</th>
<th>注解配置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>beanClass</td>
<td><code>&lt;bean class=&quot;&quot;&gt;</code></td>
<td></td>
<td>Bean 全限定名，必须是可初始化的具体类。</td>
</tr>
<tr>
<td>beanName</td>
<td><code>&lt;bean id=&quot;&quot;&gt;</code></td>
<td><code>@Bean(&quot;&quot;)</code></td>
<td></td>
</tr>
<tr>
<td>scope</td>
<td><code>&lt;bean scope=&quot;&quot;&gt;</code></td>
<td><code>@Scope</code></td>
<td>作用域。singleton、prototype 等</td>
</tr>
<tr>
<td>constructorArgumentValues</td>
<td><code>&lt;constructor-arg type=&quot;int&quot; value=&quot;7500000&quot;/&gt;</code></td>
<td></td>
<td>构造器参数。用于依赖注入。</td>
</tr>
<tr>
<td>propertyValues</td>
<td><code>&lt;property name=&quot;beanTwo&quot; ref=&quot;yetAnotherBean&quot;/&gt;</code></td>
<td></td>
<td>属性设置。用于依赖注入。</td>
</tr>
<tr>
<td>autowireMode</td>
<td><code>&lt;bean id=&quot;user&quot; autowire=&quot;&quot;&gt;</code></td>
<td></td>
<td>默认是NO，即需要通过注解<code>@autowire</code>等注解显式的注入</td>
</tr>
<tr>
<td>initMethodName</td>
<td><code>&lt;bean init-method=&quot;&quot; &gt;</code></td>
<td><code>@Bean(initMethod =&quot;&quot;</code></td>
<td></td>
</tr>
<tr>
<td>destroyMethodName</td>
<td><code>&lt;bean destroy-method=&quot;&quot;&gt;</code></td>
<td><code>@Bean(destroyMethod = &quot;&quot;)</code></td>
<td></td>
</tr>
<tr>
<td>dependsOn</td>
<td><code>&lt;bean depends-on=&quot;&quot;&gt;</code></td>
<td><code>@DependsOn</code></td>
<td></td>
</tr>
<tr>
<td>lazyInit</td>
<td><code>&lt;bean lazy-init=&quot;&quot;&gt;</code></td>
<td><code>@Lazy</code></td>
<td>是否懒加载</td>
</tr>
<tr>
<td>primary</td>
<td><code>&lt;bean primary=&quot;&quot;&gt;</code></td>
<td><code>@primary</code></td>
<td>是否为首选项</td>
</tr>
<tr>
<td>factoryBeanName</td>
<td><code>&lt;bean factory-bean=&quot;&quot;&gt;</code></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>正如<a href="#%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB">继承关系</a>所说，<code>GenericBeanDefinition</code>是最常用的实现类，官方也对应的提供了构造类<code>BeanDefinitionBuilder</code>：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token function">parseInternal</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">,</span> <span class="token class-name">ParserContext</span> parserContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其他的实现类利用构造函数new即可。</p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>手动构造<code>BeanDefinition</code>后，我们也需要手动注册到容器中去：</p>
<h2 id="带名字"><a href="#带名字" class="headerlink" title="带名字"></a>带名字</h2><h3 id="BeanDefinitionRegistry-registerBeanDefinition"><a href="#BeanDefinitionRegistry-registerBeanDefinition" class="headerlink" title="BeanDefinitionRegistry#registerBeanDefinition"></a><code>BeanDefinitionRegistry#registerBeanDefinition</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span>
		<span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">BeanDefinition</span> annotationProcessor <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span>
			<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>
			<span class="token class-name">PropertySouorcesPlaceholderConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			annotationProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="BeanDefinitionReaderUtils-registerBeanDefinition"><a href="#BeanDefinitionReaderUtils-registerBeanDefinition" class="headerlink" title="BeanDefinitionReaderUtils.registerBeanDefinition"></a><code>BeanDefinitionReaderUtils.registerBeanDefinition</code></h3><p>这种方式也就是 Spring 扫描注册 Component（ClassPathBeanDefinitionScanner#doScan）的底层实现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BeanDefinitionHolder</span> definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
definitionHolder <span class="token operator">=</span> <span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="不带名字"><a href="#不带名字" class="headerlink" title="不带名字"></a>不带名字</h2><h3 id="BeanDefinitionReaderUtils-registerWithGeneratedName"><a href="#BeanDefinitionReaderUtils-registerWithGeneratedName" class="headerlink" title="BeanDefinitionReaderUtils#registerWithGeneratedName"></a><code>BeanDefinitionReaderUtils#registerWithGeneratedName</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> packagesToScan<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">ServiceAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">AbstractBeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanDefinitionReaderUtils</span><span class="token punctuation">.</span><span class="token function">registerWithGeneratedName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="直接注册实例对象"><a href="#直接注册实例对象" class="headerlink" title="直接注册实例对象"></a>直接注册实例对象</h2><h3 id="SingletonBeanRegistry-registerSingleton"><a href="#SingletonBeanRegistry-registerSingleton" class="headerlink" title="SingletonBeanRegistry#registerSingleton"></a><code>SingletonBeanRegistry#registerSingleton</code></h3><p>除了<code>BeanDefinition</code>之外，你也可以直接注册实例对象：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token class-name">AnnotationConfigUtils</span><span class="token punctuation">.</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>主流框架</category>
        <category>Spring</category>
        <category>Spring Framework</category>
      </categories>
  </entry>
  <entry>
    <title>(二) PostProcesser</title>
    <url>/2020/11/01/%E4%BA%8C-PostProcesser/</url>
    <content><![CDATA[<h1 id="什么是-PostProcesser"><a href="#什么是-PostProcesser" class="headerlink" title="什么是 PostProcesser"></a>什么是 PostProcesser</h1><p>Spring 中提供了多种 PostProcessor（后置处理器）处理 Bean 或者 BeanFactory。<br><strong>PostProcessor 是 Spring 中一个非常重要的扩展点</strong>，不同的 PostProcessor 的不同方法会在指定的阶段被执行。<br>很多核心的功能都是由对应的 PostProcessor 扩展而来，比如处理注解注入的<code>AutowiredAnnotationBeanPostProcessor</code>。</p>
<a id="more"></a>
<h1 id="容器级别"><a href="#容器级别" class="headerlink" title="容器级别"></a>容器级别</h1><p>容器级别的 PostProcesser 是为 IOC 容器服务，处理的是整个容器中 BeanDefinitions 。</p>
<h2 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h2><p>顾名思义，<code>BeanFactoryPostProcessor</code>是 Spring 中的底层 IOC 容器 BeanFactory 的后置处理器。</p>
<h3 id="方法：修改-BeanDefinition"><a href="#方法：修改-BeanDefinition" class="headerlink" title="方法：修改 BeanDefinition"></a>方法：修改 BeanDefinition</h3><p>该接口只有一个方法，会在 Bean 实例化前修改 BeanDefinition：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/**
	 * 在bean factory 初始化之后，修改 bean definition
	 * 此时 bean definition 已加载但未实例化
	 */</span>
	<span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机"><a href="#执行时机" class="headerlink" title="执行时机"></a>执行时机</h4><p><code>BeanFactoryPostProcessor#postProcessBeanFactory</code>会在 refresh 中执行 Bean 处理前执行。<br>实际上全部委托给<code>PostProcessorRegistrationDelegate</code>执行。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// BeanFactory的一些准备工作以及一个钩子方法的单独实现</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token comment">//开始进行 Bean 级别的操作</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 全部委托给`PostProcessorRegistrationDelegate`执行</span>
    <span class="token class-name">PostProcessorRegistrationDelegate</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h2><p><code>BeanDefinitionRegistryPostProcessor</code>继承于<code>BeanFactoryPostProcessor</code>。<br><code>BeanDefinitionRegistryPostProcessor</code>有一些很重要的实现类，比如<code>ConfigurationClassPostProcessor</code>，该后置处理器会在<a href="/2020/11/01/%E4%B8%89-%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%A4%84%E7%90%86/" title="(三) 配置类处理">(三) 配置类处理</a>中详细解析。</p>
<h3 id="方法：注册新的-BeanDefinition"><a href="#方法：注册新的-BeanDefinition" class="headerlink" title="方法：注册新的 BeanDefinition"></a>方法：注册新的 BeanDefinition</h3><p><code>BeanDefinitionRegistryPostProcessor</code>额外提供了一个方法用于注册新的 BeanDefinition：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">&#123;</span>

   <span class="token comment">/**
    * 在 BeanDefinitionRegistry 初始化之后，注册新的 bean definition
    */</span>
   <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机-1"><a href="#执行时机-1" class="headerlink" title="执行时机"></a>执行时机</h4><p><code>BeanDefinitionRegistryPostProcessor</code>由于是<code>BeanFactoryPostProcessor</code>子类，所以也是被当做<code>BeanFactoryPostProcessor</code>一样在<code>PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors</code>执行。<br>但是<code>BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry</code>的语义是注册 BeanDefinition，所以他的执行时机是在修改 BeanDefinition，也就是普通的<code>BeanFactoryPostProcessor#postProcessBeanFactory</code>前面的。</p>
<h2 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h2><p>跟踪<code>PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors</code>可以了解<code>BeanFactoryPostProcessor</code>以及<code>BeanDefinitionRegistryPostProcessor</code>的执行逻辑：</p>
<ol>
<li>获取refresh前注册的<code>BeanFactoryPostProcessor</code>以及容器中查找到的<code>BeanDefinitionRegistryPostProcessor</code>;</li>
<li>按照<code>PriorityOrdered</code>、<code>Ordered</code>、普通这个顺序执行<code>BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry</code>;</li>
<li>再按照<code>BeanDefinitionRegistryPostProcessor</code>、<code>BeanFactoryPostProcessor</code>的顺序执行<code>postProcessBeanFactory</code>;</li>
<li>获取容器中查找到的<code>BeanFactoryPostProcessor</code>;</li>
<li>按照<code>PriorityOrdered</code>、<code>Ordered</code>、普通这个顺序执行<code>BeanFactoryPostProcessor#postProcessBeanFactory</code>;</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>
			<span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 先执行 BeanDefinitionRegistryPostProcessors</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BeanDefinitionRegistry</span> registry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
        <span class="token comment">// BeanFactoryPostProcessors</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// BeanDefinitionRegistryPostProcessors</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 先分类，如果`BeanDefinitionRegistryPostProcessor`就先执行</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span> postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> registryProcessor <span class="token operator">=</span>
                        <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>
                registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 先执行实现了`PriorityOrdered`的`BeanDefinitionRegistryPostProcessors`</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">></span></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 再执行实现了`Ordered`的`BeanDefinitionRegistryPostProcessors`</span>
        postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 最后执行普通的`BeanDefinitionRegistryPostProcessors`</span>
        <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 执行完了`BeanDefinitionRegistryPostProcessors#postProcessBeanDefinitionRegistry`</span>
        <span class="token comment">// 再依次执行`BeanDefinitionRegistryPostProcessor#postProcessBeanFactory`、`BeanDefinitionRegistryPostProcessor#postProcessBeanFactory`</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>
    <span class="token comment">// 再去容器中查找`BeanFactoryPostProcessor`</span>
    <span class="token comment">// currentRegistryProcessors 大多数是`ApplicationContextInitializer`或者手动new的，所以这里不会与前面重复</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">// 后面与BeanDefinitionRegistryPostProcessor的逻辑是一样的，也是排序执行</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Bean-级别"><a href="#Bean-级别" class="headerlink" title="Bean 级别"></a>Bean 级别</h1><p>在 IOC 容器批量修改 Bean Definition 之后，BeanPostProcessor 提供了对单个Bean的后置处理器。</p>
<h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><p><code>BeanPostProcessor</code>是 Bean 级别后置处理器的父类。</p>
<h3 id="方法：初始化前"><a href="#方法：初始化前" class="headerlink" title="方法：初始化前"></a>方法：初始化前</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 在 Bean 实例化之后，初始化之前被执行
 */</span>
<span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机-2"><a href="#执行时机-2" class="headerlink" title="执行时机"></a>执行时机</h4><p>实例化之后。</p>
<h3 id="方法：初始化后"><a href="#方法：初始化后" class="headerlink" title="方法：初始化后"></a>方法：初始化后</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 在 Bean 实例化之后，且初始化后被执行
 */</span>
<span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机-3"><a href="#执行时机-3" class="headerlink" title="执行时机"></a>执行时机</h4><p><code>postProcessBeforeInitialization</code>之后。</p>
<h2 id="InstantiationAwareBeanPostProcessor"><a href="#InstantiationAwareBeanPostProcessor" class="headerlink" title="InstantiationAwareBeanPostProcessor"></a>InstantiationAwareBeanPostProcessor</h2><p><code>InstantiationAwareBeanPostProcessor</code> 继承自<code>BeanPostProcessor</code>。<br>从名字的语义来看，就是对实例化前后进行了一个 Aware 切面。<br>在 Bean 实例化前后提供了额外三个钩子方法。<br>注意<code>Instantiation</code> 与 <code>Instantization</code>两个单词，前者是实例化，后者是初始化。</p>
<h3 id="方法：实例化前"><a href="#方法：实例化前" class="headerlink" title="方法：实例化前"></a>方法：实例化前</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机-4"><a href="#执行时机-4" class="headerlink" title="执行时机"></a>执行时机</h4><p>目标对象实例化之前调用，可以用生成代理对象。</p>
<h3 id="方法：实例化后"><a href="#方法：实例化后" class="headerlink" title="方法：实例化后"></a>方法：实例化后</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="执行时机-5"><a href="#执行时机-5" class="headerlink" title="执行时机"></a>执行时机</h4><p>在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置。</p>
<h3 id="方法：属性值修改"><a href="#方法：属性值修改" class="headerlink" title="方法：属性值修改"></a>方法：属性值修改</h3><p>对属性值的修改，比如自动装配，就是在这实现的。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;**
 * 对属性值进行修改
 *&#x2F;
default PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName)
        throws BeansException &#123;
    return null;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="执行时机-6"><a href="#执行时机-6" class="headerlink" title="执行时机"></a>执行时机</h4><p><code>postProcessProperties</code>是<code>postProcessAfterInstantiation</code>执行返回 true 时，才会执行。</p>
<h2 id="SmartInstantiationAwareBeanPostProcessor"><a href="#SmartInstantiationAwareBeanPostProcessor" class="headerlink" title="SmartInstantiationAwareBeanPostProcessor"></a>SmartInstantiationAwareBeanPostProcessor</h2><p><code>SmartInstantiationAwareBeanPostProcessor</code>继承自<code>InstantiationAwareBeanPostProcessor</code>。<br><code>SmartInstantiationAwareBeanPostProcessor</code> 是一个工具类，</p>
<h3 id="方法：预测-postProcessBeforeInstantiation-返回的最终类型"><a href="#方法：预测-postProcessBeforeInstantiation-返回的最终类型" class="headerlink" title="方法：预测 postProcessBeforeInstantiation 返回的最终类型"></a>方法：预测 postProcessBeforeInstantiation 返回的最终类型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">default</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">predictBeanType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法：确认构造函数"><a href="#方法：确认构造函数" class="headerlink" title="方法：确认构造函数"></a>方法：确认构造函数</h3><p><code>SmartInstantiationAwareBeanPostProcessor#determineCandidateConstructors</code>会在实例化（AbstractAutowireCapableBeanFactory#createBeanInstance）中用到</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">determineCandidateConstructors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法：提前暴露的bean引用"><a href="#方法：提前暴露的bean引用" class="headerlink" title="方法：提前暴露的bean引用"></a>方法：提前暴露的bean引用</h3><p>该方法会在循环依赖处理中被用到。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="MergedBeanDefinitionPostProcessor"><a href="#MergedBeanDefinitionPostProcessor" class="headerlink" title="MergedBeanDefinitionPostProcessor"></a>MergedBeanDefinitionPostProcessor</h2><p><code>MergedBeanDefinitionPostProcessor</code>是专门处理合并后的<code>RootBeanDefinition</code>（处理继承关系）。</p>
<h3 id="方法：处理合并后的RootBeanDefinition"><a href="#方法：处理合并后的RootBeanDefinition" class="headerlink" title="方法：处理合并后的RootBeanDefinition"></a>方法：处理合并后的<code>RootBeanDefinition</code></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanType<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="DestructionAwareBeanPostProcessor"><a href="#DestructionAwareBeanPostProcessor" class="headerlink" title="DestructionAwareBeanPostProcessor"></a>DestructionAwareBeanPostProcessor</h2><p><code>DestructionAwareBeanPostProcessor</code>是销毁前的后置处理器。<br>比如<code>CommonAnnotationBeanPostProcessor</code>就会处理标准注解<code>@PreDestroy</code>。</p>
<h3 id="方法：销毁前的处理"><a href="#方法：销毁前的处理" class="headerlink" title="方法：销毁前的处理"></a>方法：销毁前的处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">postProcessBeforeDestruction</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="一些重要的PostProcessor"><a href="#一些重要的PostProcessor" class="headerlink" title="一些重要的PostProcessor"></a>一些重要的PostProcessor</h1><table>
<thead>
<tr>
<th>名称</th>
<th>实现接口</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ApplicationContextAwareProcessor</td>
<td>BeanPostProcessor</td>
<td>执行 Aware 回调</td>
</tr>
<tr>
<td>ConfigurationPropertiesBindingPostProcessor</td>
<td>BeanPostProcessor</td>
<td>绑定PropertySources 至 对应的@ConfigurationProperties 配置Bean上。如Server.port –&gt; ServerProperties</td>
</tr>
<tr>
<td>ConfigurationClassPostProcessor</td>
<td>BeanDefinitionRegistryPostProcessor</td>
<td>扫描注册配置类以及@Bean、@Component</td>
</tr>
<tr>
<td>AnnotationAwareAspectJAutoProxyCreator</td>
<td>SmartInstantiationAwareBeanPostProcessor</td>
<td>对AOP对象进行代理</td>
</tr>
<tr>
<td>CommonAnnotationBeanPostProcessor</td>
<td>InstantiationAwareBeanPostProcessor、MergedBeanDefinitionPostProcessor、DestructionAwareBeanPostProcessor</td>
<td>对JSR-250 @Resource、@PostConstruct 、@PreDestroy等注解的支持</td>
</tr>
<tr>
<td>AutowiredAnnotationBeanPostProcessor</td>
<td>SmartInstantiationAwareBeanPostProcessor、MergedBeanDefinitionPostProcessor</td>
<td>对@Autowire、@Value、@Inject 注入相关注解的支持</td>
</tr>
<tr>
<td>ApplicationListenerDetector</td>
<td>DestructionAwareBeanPostProcessor、MergedBeanDefinitionPostProcessor</td>
<td>ApplicationListener 注册和移除至事件广播器</td>
</tr>
</tbody></table>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实 Spring 的作者们的确花了不少时间在命名上。我们只要观察对应后置处理器的语义，基本上就能猜测到改处理器的执行时机。</p>
]]></content>
      <categories>
        <category>主流框架</category>
        <category>Spring</category>
        <category>Spring Framework</category>
      </categories>
  </entry>
  <entry>
    <title>(零) Spring Framework系列纲要</title>
    <url>/2020/11/01/%E9%9B%B6-Spring-Framework%E7%B3%BB%E5%88%97%E7%BA%B2%E8%A6%81/</url>
    <content><![CDATA[<p>《Spring Framework系列》是笔者准备用最小的篇幅，结合源码总结 Spring Framework 中的<strong>最核心和最常用</strong>的模块。<br>目的是拥有可以快速排查问题以及个人项目集成 Spring 的能力。<br>目前计划分为以下几个章节：</p>
<ol>
<li><a href="/2020/11/01/%E4%B8%80-BeanDefinition/" title="(一) BeanDefinition">(一) BeanDefinition</a></li>
<li><a href="/2020/11/01/%E4%BA%8C-PostProcesser/" title="(二) PostProcesser">(二) PostProcesser</a></li>
<li><a href="/2020/11/01/%E4%B8%89-%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%A4%84%E7%90%86/" title="(三) 配置类处理">(三) 配置类处理</a></li>
<li><a href="/2020/11/01/%E5%9B%9B-Spring-Event/" title="(四) Spring Event">(四) Spring Event</a></li>
<li>getBean</li>
<li>循环依赖</li>
<li>refresh</li>
<li>Bean生命周期</li>
<li>AOP</li>
</ol>
]]></content>
      <categories>
        <category>主流框架</category>
        <category>Spring</category>
        <category>Spring Framework</category>
      </categories>
  </entry>
</search>
